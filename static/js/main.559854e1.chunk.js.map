{"version":3,"sources":["conponents/Header.js","conponents/Error.js","conponents/Formulario.js","conponents/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Error","mensaje","Formulario","busqueda","guardarBusqueda","guardarConsultar","useState","error","guardarError","ciudad","pais","handleChange","e","target","name","value","onSubmit","preventDefault","type","id","onChange","htmlFor","Clima","resultado","main","parseFloat","temp","toFixed","temp_max","temp_min","App","componente","consultar","guardarResultado","useEffect","a","url","fetch","respuesta","json","cod","consultarAPI","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.559854e1.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Header = ({titulo}) => {\r\n    return (\r\n\r\n        <nav>\r\n\r\n            <div className=\"nav-wrapper light-blue darken-2\" >\r\n                <a href=\"#!\" className=\"brand-logo\">{titulo}</a>\r\n\r\n            </div>\r\n\r\n        </nav>\r\n\r\n      );\r\n}\r\n\r\nHeader.propTypes={\r\n    titulo: PropTypes.string.isRequired\r\n}\r\n \r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst Error = ({mensaje}) => {\r\n    return ( \r\n        <p className=\"red darken-4 error\">{mensaje}</p>\r\n     );\r\n}\r\n\r\nError.propTypes ={\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\n \r\nexport default Error;","import React, {useState} from 'react';\r\nimport Error from './Error';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Formulario = ({busqueda, guardarBusqueda, guardarConsultar}) => {\r\n\r\n\r\n    const [error, guardarError]= useState(false)\r\n\r\n    const {ciudad, pais} = busqueda\r\n\r\n    // Funcion que coloca los elementos en el State\r\n\r\n    const handleChange = e =>{\r\n        guardarBusqueda({\r\n            ...busqueda,\r\n            [e.target.name]:e.target.value\r\n        });\r\n\r\n    }\r\n\r\n    const handleSubmit=e=>{\r\n        e.preventDefault()\r\n\r\n        // validar\r\n\r\n        if(ciudad===''||pais ===''){\r\n            guardarError(true)\r\n            return;\r\n        }\r\n\r\n        guardarError(false)\r\n\r\n\r\n        // pasarlo al componente princial\r\n\r\n        guardarConsultar(true)\r\n        \r\n    }\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={handleSubmit}\r\n        >\r\n            {error? <Error mensaje=\"Ambos campos son obligatorios\"/>: null}\r\n            \r\n            <div className=\"input-field col s12\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"ciudad\"\r\n                    id=\"ciudad\"\r\n                    value={ciudad}\r\n                    onChange={handleChange}\r\n                />\r\n                <label htmlFor=\"ciudad\">Ciudad: </label>\r\n            </div>\r\n\r\n            <div className=\"input-field col s12\">\r\n                <select\r\n                    name=\"pais\"\r\n                    id=\"pais\"\r\n                    value={pais}\r\n                    onChange={handleChange}\r\n                >\r\n                    <option value=\"\">-- Seleccione un país --</option>\r\n                    <option value=\"US\">Estados Unidos</option>\r\n                    <option value=\"MX\">México</option>\r\n                    <option value=\"AR\">Argentina</option>\r\n                    <option value=\"CO\">Colombia</option>\r\n                    <option value=\"CR\">Costa Rica</option>\r\n                    <option value=\"ES\">España</option>\r\n                    <option value=\"PE\">Perú</option>\r\n                </select>\r\n                <label htmlFor=\"pais\">País: </label>\r\n            </div>\r\n\r\n            <div className=\"input-field col s12\">\r\n                <input  \r\n                    type=\"submit\"\r\n                    value=\"Buscar Clima\"\r\n                    className=\"waves-effect waves-light btn-large btn-block yellow accent-4\"\r\n                />\r\n            </div>\r\n        </form>\r\n     );\r\n}\r\n\r\nFormulario.propTypes={\r\n    busqueda : PropTypes.object.isRequired,\r\n    guardarBusqueda: PropTypes.func.isRequired,\r\n    guardarConsultar:PropTypes.func.isRequired\r\n\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Clima = ({resultado}) => {\r\n\r\n    const {name,main}= resultado;\r\n\r\n    if(!name) return null;\r\n\r\n    const kelvin = 273.15;\r\n\r\n    return ( \r\n\r\n        <div className=\"card-panel white col s12\">\r\n            <div className=\"black-text\">\r\n                <h2>El clima de {name} es:</h2>\r\n                <p className=\"temperatura\"> {parseFloat(main.temp- kelvin,10).toFixed(1)}<span>&#x2103;</span></p>\r\n                <p> Temp máx: {parseFloat(main.temp_max- kelvin,10).toFixed(1)}<span>&#x2103;</span></p>\r\n                <p> Temp min: {parseFloat(main.temp_min- kelvin,10).toFixed(1)}<span>&#x2103;</span></p>\r\n\r\n\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n        \r\n     );\r\n}\r\n\r\nClima.propTypes={\r\n    resultado: PropTypes.object.isRequired\r\n}\r\n \r\nexport default Clima;","import React, { Fragment,  useState, useEffect } from 'react';\nimport Header from './conponents/Header';\nimport Formulario from './conponents/Formulario';\nimport Clima from './conponents/Clima';\nimport Error from './conponents/Error';\n\nfunction App() {\n\n  const [busqueda, guardarBusqueda] = useState({\n    ciudad: '',\n    pais: ''\n  });\n\nconst [consultar, guardarConsultar]= useState(false)\n\nconst [resultado, guardarResultado] = useState({})\nconst [error, guardarError]= useState(false)\n\nconst {ciudad, pais}= busqueda;\n\n\n\n  useEffect(() => {\n\n    \n\n      \n    const consultarAPI = async () => {\n\n      if (consultar) {\n        const appId = '38b387dcf45ae20fdb8da8c41d84fce2';\n        const url = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n        const respuesta = await fetch(url)\n        const resultado = await respuesta.json()\n        guardarResultado(resultado)\n        guardarConsultar(false)\n\n        // detecta si hubo resultados correctos en la consulta\n\n        if (resultado.cod === \"404\") {\n          guardarError(true)\n        } else {\n          guardarError(false)\n        }\n\n      }\n\n    }\n    \n    consultarAPI()\n    //  eslint-disable-next-line\n  }, [consultar])\n\n  let componente;\n\n  if (error) {\n    componente = <Error mensaje=\"No hay resultados\"/>\n  } else {\n    componente = <Clima\n      resultado={resultado}\n    />\n  }\n\n\n  return (\n    <Fragment>\n\n      <Header\n        titulo='Clima React App'\n      />\n\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col m6 s12\">\n              <Formulario\n                busqueda={busqueda}\n                guardarBusqueda={guardarBusqueda}\n                guardarConsultar={guardarConsultar}\n              />\n            </div>\n\n            <div className=\"col m6 s12\">\n             \n              {componente}\n            </div>\n          </div>\n        </div>\n      </div>\n\n    </Fragment>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}